#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jul 01, 2025 09:01:17 AM PDT  platform: Windows NT

import sys
import tkinter as tk
from tkinter.constants import *
import os.path
from tkinter.scrolledtext import ScrolledText
from tkinter.simpledialog import SimpleDialog
from organize import sorter
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from PIL import (Image as Img, ImageTk)
import PyPDF2
from pdf2image import convert_from_path
_location = os.path.dirname(__file__)
ind = _location.find("\\")
ind = _location.find("\\", ind+1)
ind = _location.find("\\", ind+1)
starting_dir = _location[0:ind]
from numpy import linspace
import Organize_support
_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: Organize_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'default.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font = "TkDefaultFont")
    if sys.platform == "win32":
       style.theme_use('winnative')    
    _style_code_ran = 1

class OpenPage:
    def save_and_proceed(self, *args):
        source = self.source.get()
        dest = self.dest.get()
        if (len(source)>0): self.org.change_source(source)
        if (len(dest)>0):   self.org.change_dest(dest)
        self.org.update()
        self.other.preview()
        self.top.destroy()
        
    def __init__(self, org, other, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        self.other = other
        self.source = ""
        self.dest = ""
        top.geometry("665x451+427+197")
        top.minsize(120, 1)
        top.maxsize(1444, 881)
        top.resizable(1,  1)
        top.title("Set Directories")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")
        self.org = org
        self.top = top
        self.source = tk.StringVar()
        self.dest = tk.StringVar()

        _style_code()
        self.TLabel2 = ttk.Label(self.top)
        self.TLabel2.place(relx=0.340, rely=0.443, height=20, width=93, anchor = 'e')
        self.TLabel2.configure(font="-family {Segoe UI} -size 9")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Target Directory''')
        self.TLabel2.configure(compound='left')
        self.TLabel2.configure(background = "#d9d9d9")

        self.TEntry1 = ttk.Entry(self.top)
        self.TEntry1.place(relx=0.346, rely=0.443, relheight=0.042
                , relwidth=0.247, anchor = 'w')
        self.TEntry1.configure(font="-family {Courier New} -size 10")
        self.TEntry1.configure(textvariable=self.dest)
        self.TEntry1.configure(cursor="ibeam")

        self.TLabel1 = ttk.Label(self.top)
        self.TLabel1.place(relx=0.340, rely=0.377, height=20, width=93, anchor = 'e')
        self.TLabel1.configure(font="-family {Segoe UI} -size 9")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Source Directory''')
        self.TLabel1.configure(compound='left')
        self.TLabel1.configure(background = "#d9d9d9")

        self.Entry1 = ttk.Entry(self.top)
        self.Entry1.place(relx=0.346, rely=0.377, height=20, relwidth=0.247, anchor = 'w')
        self.Entry1.configure(font="-family {Courier New} -size 10")
        self.Entry1.configure(textvariable=self.source)
        self.Entry1.configure(cursor = "ibeam")

        self.Confirm = tk.Button(self.top)
        self.Confirm.place(relx=0.4, rely=0.554, height=20, width=93)
        self.Confirm.configure(activebackground="#d9d9d9")
        self.Confirm.configure(activeforeground="black")
        self.Confirm.configure(background="#d9d9d9")
        self.Confirm.configure(command=self.save_and_proceed)
        self.Confirm.configure(disabledforeground="#a3a3a3")
        self.Confirm.configure(font="-family {Segoe UI} -size 9")
        self.Confirm.configure(foreground="#000000")
        self.Confirm.configure(highlightbackground="#d9d9d9")
        self.Confirm.configure(highlightcolor="#000000")
        self.Confirm.configure(text='''Confirm''')
        

class Toplevel1:
    def openf(self, *args):
        self.org.run("open")
        self.preview()
    def update(self, *args):
        self.org.update()
        self.preview()
    def moveto(self, *args):
        self.org.run(f"moveto {self.entry.get()}")
        self.preview()

    def newfolder(self, *args):
        self.org.run(f"newfolder {self.entry.get()}")
        self.preview()
    def back(self, *args):
        self.org.back()
        self.preview()
    def delete(self, *args):
        self.org.run(f"remove")
        self.preview()
    def next(self, *args):
        self.org.run(" ")
        self.preview()
    def preview(self, *args):
        file_name = self.org.full_path()
        self.currentD.set(self.org.pathto)
        self.currentS.set(self.org.path)
        self.File.set(self.org.getCurrent())
        self.Preview.delete(1.0, tk.END)
        if (os.path.isdir(file_name)):
            for i, file in enumerate(self.org.get_children()):
                self.Preview.insert(i+.0, f"{file}\n")
                if (i==self.vars["Number of subfiles shown (for directories)"]):
                    break
        
        try:
            with open(file_name, "r") as f:
                content = f.read()
                self.Preview.insert(1.0, content[0:self.vars["Number of characters shown (plain text)"]])
        except:
            pass

        #self.Preview.lift(aboveThis=self.PictureFrame)
        try:
            self.PictureFrame.place(relx=0.425, rely=0.015, anchor = "nw")
            image = Img.open(self.org.full_path())
            width  = int(self.top.winfo_width()*(.557))
            height  = int(self.top.winfo_height()*(.949))
            ratio = height/image.size[1]
            if (ratio*image.size[0]>width):
                ratio = width/image.size[0]
                image = image.resize((width, int(ratio*image.size[1])))
            else:
                image = image.resize((int(image.size[0]*ratio), height))
            img = ImageTk.PhotoImage(image)
            self.PictureFrame.config(image=img)
            self.PictureFrame.image = img
        except: 
            self.PictureFrame.image = 0
            self.PictureFrame.place_forget()
        if (".pdf" in file_name):
            with open(self.org.full_path(), "rb") as f:
                reader = PyPDF2.PdfReader(f)
                for i in range(min(self.vars["Number of pages shown (pdf)"], len(reader.pages))):
                    self.Preview.insert(i+0.0, reader.pages[i].extract_text())
            # pages = convert_from_path(self.org.full_path())
            # for i, page in enumerate(pages):
            #     self.Preview.insert(i+.0, pytesseract.image_to_string(page))
            
            # images = convert_from_path(self.org.full_path())
            # image = images[0]
            # ratio = image.size[0]/image.size[1]
            # image = image.resize((int(400*ratio),400))
            # img = ImageTk.PhotoImage(image, size = (1,1))
            # self.PictureFrame.config(image=img)
            # self.PictureFrame.image = img
    def openOther(self, *args):
        _top1 = tk.Toplevel(self.top)
        self.OtherPage = OpenPage(self.org, self, _top1)
    def open_settings(self, *args):
        top1 = tk.Toplevel(self.top)
        self.Settings = Settings_window(self.vars, self,top=top1)
    def move_into_current(self, *args):
        self.org.move_into()
        self.preview()
    def move_back(self, *args):
        self.org.move_back()
        self.preview()
    def __init__(self, org, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        top.geometry("1178x589+104+110")
        top.minsize(120, 1)
        top.maxsize(1444, 881)
        top.resizable(1,  1)
        top.title("Main")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")
        show_num_pages = 5
        show_num_characters = 100
        show_num_files = 20
        self.vars = {"Number of pages shown (pdf)" : show_num_pages, 
                     "Number of characters shown (plain text)" : show_num_characters,
                     "Number of subfiles shown (for directories)" : show_num_files}
        self.top = top
        self.File = tk.StringVar()
        self.org = org
        self.entry = tk.StringVar()
        self.currentS=tk.StringVar()
        self.currentD = tk.StringVar()

        
        self.menubar = Menu(self.top)
        self.top.config(menu = self.menubar)
        self.Settings = Menu(self.menubar, tearoff=False)
        self.Settings.add_command(label='Settings',command=self.open_settings)
        self.menubar.add_cascade(label="File",menu=self.Settings)

        

        self.Open = tk.Button(self.top)
        self.Open.configure(activebackground="#d9d9d9")
        self.Open.configure(activeforeground="black")
        self.Open.configure(background="#d9d9d9")
        self.Open.configure(disabledforeground="#a3a3a3")
        self.Open.configure(font="-family {Segoe UI} -size 9")
        self.Open.configure(foreground="#000000")
        self.Open.configure(highlightbackground="#d9d9d9")
        self.Open.configure(highlightcolor="#000000")
        self.Open.configure(text='''Open''')
        self.Open.configure(command = self.openf)

        self.Delete = tk.Button(self.top)
        self.Delete.configure(activebackground="#d9d9d9")
        self.Delete.configure(activeforeground="black")
        self.Delete.configure(background="#d9d9d9")
        self.Delete.configure(disabledforeground="#a3a3a3")
        self.Delete.configure(font="-family {Segoe UI} -size 9")
        self.Delete.configure(foreground="#000000")
        self.Delete.configure(highlightbackground="#d9d9d9")
        self.Delete.configure(highlightcolor="#000000")
        self.Delete.configure(text='''Delete''')
        self.Delete.configure(command = self.delete)

        self.NewFolder = tk.Button(self.top)
        self.NewFolder.configure(activebackground="#d9d9d9")
        self.NewFolder.configure(activeforeground="black")
        self.NewFolder.configure(background="#d9d9d9")
        self.NewFolder.configure(disabledforeground="#a3a3a3")
        self.NewFolder.configure(font="-family {Segoe UI} -size 9")
        self.NewFolder.configure(foreground="#000000")
        self.NewFolder.configure(highlightbackground="#d9d9d9")
        self.NewFolder.configure(highlightcolor="#000000")
        self.NewFolder.configure(text='''New Folder''')
        self.NewFolder.configure(command = self.newfolder)

        self.Moveto = tk.Button(self.top)
        self.Moveto.configure(activebackground="#d9d9d9")
        self.Moveto.configure(activeforeground="black")
        self.Moveto.configure(background="#d9d9d9")
        self.Moveto.configure(disabledforeground="#a3a3a3")
        self.Moveto.configure(font="-family {Segoe UI} -size 9")
        self.Moveto.configure(foreground="#000000")
        self.Moveto.configure(highlightbackground="#d9d9d9")
        self.Moveto.configure(highlightcolor="#000000")
        self.Moveto.configure(text='''Move to''')
        self.Moveto.configure(command = self.moveto)
        self.Back = tk.Button(self.top)
        
        self.Next = tk.Button(self.top)
        self.Next.configure(activebackground="#d9d9d9")
        self.Next.configure(activeforeground="black")
        self.Next.configure(background="#d9d9d9")
        self.Next.configure(disabledforeground="#a3a3a3")
        self.Next.configure(font="-family {Segoe UI} -size 9")
        self.Next.configure(foreground="#000000")
        self.Next.configure(highlightbackground="#d9d9d9")
        self.Next.configure(highlightcolor="#000000")
        self.Next.configure(text='''Next''')
        self.Next.configure(command = self.next)

        self.Back.configure(activebackground="#d9d9d9")
        self.Back.configure(activeforeground="black")
        self.Back.configure(background="#d9d9d9")
        self.Back.configure(disabledforeground="#a3a3a3")
        self.Back.configure(font="-family {Segoe UI} -size 9")
        self.Back.configure(foreground="#000000")
        self.Back.configure(highlightbackground="#d9d9d9")
        self.Back.configure(highlightcolor="#000000")
        self.Back.configure(text='''Back''')
        self.Back.configure(command = self.back)

        self.Enter = Button(self.top)
        self.Enter.configure(command = self.move_into_current, text = "Move into current")

        self.Move_back = Button(self.top)
        self.Move_back.configure(command = self.move_back, text = "Move into previous directory")
        

        self.ChangeDir = Button(self.top)
        self.ChangeDir.configure(command = self.openOther, text = "Set Directories")

        positions = linspace(.01, .35, 6)
        width = 67
        self.Next.place(relx=positions[1], rely=0.537, height=26, width=width)
        self.Open.place(relx=positions[5], rely=0.537, height=26, width=width)
        self.Delete.place(relx=positions[4], rely=0.537, height=26, width=width)
        self.NewFolder.place(relx=positions[3], rely=0.537, height=26, width=width)
        self.Moveto.place(relx=positions[2], rely=0.537, height=26, width=width)
        self.Back.place(relx=positions[0], rely=0.537, height=26, width=width)
        self.ChangeDir.place(relx = positions[0], rely=.47, width = width*2)
        self.Enter.place(relx = positions[2], rely = .47, height = 26, width=width*2)
        self.Move_back.place(relx = positions[4], rely = .47, height = 26, width=width*2.5)
        helpMessage = """Welcome! 
The organizer defaults to operate within C:\\Users\\{name}, go to change directories to change this. Change directories can take an absolute or relative path.

The buttons (Scroll to see all of them):

Open: Opens the current file

Move To [dest]: moves file to destination typed in entry box above (Moves to directory relative to target directory)

New Folder [name]: Creates new file in directory specified in above textbox. The final argument dictates name of new directory

Delete: Deletes current file"""
        self.Text2 = tk.Text(self.top)
        self.Text2.place(relx=0.013, rely=0.67, relheight=0.30, relwidth=0.357)
        self.Text2.configure(background="#d9d9d9")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#43f0fe")
        self.Text2.configure(highlightcolor="#000000")
        self.Text2.configure(insertbackground="#000000")
        self.Text2.configure(selectbackground="#d9d9d9")
        self.Text2.configure(selectforeground="black")
        self.Text2.configure(wrap="word")
        self.Text2.insert(1.0, helpMessage)

       

        _style_code()
        self.Preview = ScrolledText(self.top)
        self.Preview.place(relx=0.425, rely=0.015, relheight=0.949
                , relwidth=0.558)
        self.Preview.configure(background="white")
        self.Preview.configure(font="TkTextFont")
        self.Preview.configure(foreground="black")
        self.Preview.configure(highlightbackground="#d9d9d9")
        self.Preview.configure(highlightcolor="#000000")
        self.Preview.configure(insertbackground="#000000")
        self.Preview.configure(insertborderwidth="3")
        self.Preview.configure(selectbackground="#d9d9d9")
        self.Preview.configure(selectforeground="black")
        self.Preview.configure(wrap="word")

        self.PictureFrame = tk.Label(self.top)
        self.PictureFrame.place(relx=0.425, rely=0.015, height=23, width=81, anchor = "nw")
        self.PictureFrame.configure(activebackground="#d9d9d9")
        self.PictureFrame.configure(activeforeground="black")
        
        self.currentSource = tk.Label(self.top)
        self.currentSource.configure(background="#d9d9d9", text = "Current Source Directory = ")
        self.labelSource = tk.Label(self.top)
        self.labelSource.configure(background="#d9d9d9", textvariable = self.currentS)

        self.currentDest = tk.Label(self.top)
        self.currentDest.configure(background="#d9d9d9", text = "Current Target Directory = ")
        self.labelDest = tk.Label(self.top)
        self.labelDest.configure(background="#d9d9d9", textvariable = self.currentD)
        
        xpos_labels = .15
        ystart_labels = .15
        self.currentSource.place(relx = xpos_labels, rely = ystart_labels, anchor = "e")
        self.currentDest.place(relx = xpos_labels, rely = ystart_labels+.03, anchor = "e")
        self.labelSource.place(relx = xpos_labels, rely = ystart_labels, anchor = "w")
        self.labelDest.place(relx = xpos_labels, rely = ystart_labels+.03, anchor = "w")
        
        self.TLabel3 = ttk.Label(self.top)
        self.TLabel3.place(relx=0.007, rely=0.071, height=20, width=29)
        self.TLabel3.configure(font="TkDefaultFont")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''File:''')
        self.TLabel3.configure(compound='left')
        self.TLabel3.configure(background = "#d9d9d9")

        self.TEntry2 = ttk.Entry(self.top)
        self.TEntry2.place(relx=0.076, rely=0.611, relheight=0.032
                , relwidth=0.25)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="ibeam")
        self.TEntry2.configure(textvariable = self.entry)

        self.TLabel4 = ttk.Label(self.top)
        self.TLabel4.place(relx=0.028, rely=0.071, height=20, relwidth = .38)
        self.TLabel4.configure(font="-family {Segoe UI} -size 9")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(textvariable=self.File)
        self.TLabel4.configure(compound='left')
        self.TLabel4.configure(cursor="fleur")
        self.TLabel4.configure(background = "#d9d9d9")
        self.File.set(self.org.getCurrent())
        self.preview()

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

class Settings_window:
    def change_setting(self, item,*args):
        text = self.entries[item].get()
        self.settings[item] = int(text)
        self.setting_items[item].configure(text = f"{item}: {text}")
        self.main.preview()
    
    def __init__(self, vars, main,top=None):
        top.geometry("400x300")
        top.title("Settings")
        self.settings = vars
        self.entries = {}
        self.setting_items = {}
        self.buttons = {}
        self.main = main
        locx = .90
        locy = linspace(.1, .8, len(vars))
        buttonwidth = .1
        boxwidth = .1
        self.top = top
        buffer=.03
        for i, item in enumerate(self.settings):
            setting = tk.Label(self.top, text = f"{item}: {self.settings[item]}")
            entrybox = tk.Entry(self.top)
            button = ttk.Button(self.top, text = "Set",command = lambda i=item: self.change_setting(item = i))
            button.place(relx = locx, rely = locy[i],relwidth= buttonwidth, anchor = "e")
            setting.place(relx = locx-buttonwidth-boxwidth-2*buffer, rely = locy[i], anchor = "e")
            entrybox.place(relx = locx-buttonwidth-buffer, rely = locy[i], anchor = "e", relwidth = boxwidth)
            
            self.entries[item] = entrybox
            self.setting_items[item] = setting
            self.buttons[item] = button



def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    Organize_support.main()

if __name__ == '__main__':
    Organize_support.main()




